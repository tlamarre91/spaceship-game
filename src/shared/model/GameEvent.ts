import * as uuid from "uuid";
import { HexVector } from "./HexVector";

//export type EventType =
//  "sj" |
//  "sd" |
//  "sm" |
//  "em" |
//  "es"

//export const EVENT_TYPES: Record<string, EventType> = {
//  SpaceshipJoined: "sj",
//  SpaceshipDestroyed: "sd",
//  SpaceshipDamaged: "sm",
//  EntityMoved: "em",
//  EntitySpawned: "es"
//};

export enum EventType {
  SpaceshipJoined = "sj",
  SpaceshipDestroyed = "sd",
  SpaceshipDamaged = "sm",
  EntityMoved = "em",
  EntitySpawned = "es",
  EntityRemoved = "er",
}

/**
 * An event generated by a canonical GameState as a result of executing
 * GameActions and simulating GameEntitys
 */
export interface GameEvent {
  readonly eventType: EventType;
}

/**
 * @remarks
 * i think this is redundant with EntitySpawned. don't think the specificity is needed
 */
export class SpaceshipJoined implements GameEvent {
  readonly eventType = EventType.SpaceshipJoined;
  readonly spaceshipId: string;
  constructor(spaceshipId: string) {
    this.spaceshipId = spaceshipId;
  }
}

export function isSpaceshipJoined(ev: GameEvent): ev is SpaceshipJoined {
  return ev.eventType == EventType.SpaceshipJoined;
}

export class SpaceshipDestroyed implements GameEvent {
  readonly eventType = EventType.SpaceshipDestroyed;
  constructor(readonly spaceshipId: string) { }
}

export function isSpaceshipDestroyed(ev: GameEvent): ev is SpaceshipDestroyed {
  return ev.eventType == EventType.SpaceshipDestroyed;
}

export class SpaceshipDamaged implements GameEvent {
  readonly eventType = EventType.SpaceshipDamaged;

  constructor(readonly spaceshipId: string, readonly damage: number) { }
}

export function isSpaceshipDamaged(ev: GameEvent): ev is SpaceshipDamaged {
  return ev.eventType == EventType.SpaceshipDamaged;
}

export class EntityMoved implements GameEvent {
  readonly eventType = EventType.EntityMoved;
  //readonly fromPos: HexVector;

  constructor(readonly entityId: string, /* fromPos: HexVector, */ readonly toPos: HexVector) {
    //this.entityId = entityId;
    //this.fromPos = fromPos;
    //this.toPos = toPos;
  }
}

export function isEntityMoved(ev: GameEvent): ev is EntityMoved {
  return ev.eventType == EventType.EntityMoved;
}

export class EntitySpawned implements GameEvent {
  readonly eventType = EventType.EntitySpawned;

  constructor(readonly entityData: object) { }
}

export function isEntitySpawned(ev: GameEvent): ev is EntitySpawned {
  return ev.eventType == EventType.EntitySpawned;
}

export class EntityRemoved implements GameEvent {
  readonly eventType = EventType.EntityRemoved;
  constructor(readonly entityId: string) { }
}

export function isEntityRemoved(ev: GameEvent) : ev is EntityRemoved {
  return ev.eventType == EventType.EntityRemoved;
}
